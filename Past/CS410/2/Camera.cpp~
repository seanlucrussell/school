#include "Camera.h"

#include "Ray.h"
#include <iostream>

using namespace std;
using namespace Eigen;

Vector3d Camera::PixelToPoint(int i, int j) {
  // vpn stands for View Plane Normal
  Vector3d vpn = look - eye;
  vpn.normalize();
  float px = float(i) / (resX - 1) * (rightBound - leftBound) + leftBound;
  float py = float(j) / (resY - 1) * (topBound - bottomBound) + bottomBound;
  Vector3d point = eye + (d * vpn) + (px * up.normalized()) + (py * up.cross(vpn));
  return point;
}

float** Camera::GenerateDepthMap(vector<Object>& objects, vector<Sphere>& spheres) {
  float** depthMap = new float*[resX];
  for (int x = 0; x < resX; ++x) {
    depthMap[x] = new float[resY];
    for (int y = 0; y < resY; ++y) {
      Vector3d start = PixelToPoint(x,y);
      // IF YOU CANT SEE ANYTHING THIS MIGHT BE BACKWARDS
      Vector3d direction = start - eye;
      // Vector3d direction = eye - start;
      Ray r;
      r.start = start;
      r.direction = direction;
      r.ShootIntoScene(objects, spheres);
      depthMap[x][y] = r.depth;
      
    }
  }

  return depthMap;
}
