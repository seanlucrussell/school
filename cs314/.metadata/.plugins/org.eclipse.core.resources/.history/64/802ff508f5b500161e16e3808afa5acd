package client;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;

import common.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author seanrussell
 */
public class ClientGui extends javax.swing.JFrame implements ActionListener,
		ChatIF {

	final public static int DEFAULT_PORT = 5555;
	ChatClient client;
	String username;
	String password;

	/**
	 * Creates new form MainWindow
	 */
	public ClientGui() {
		initComponents();
		inputText.addActionListener(this);
		menuItemLogin.addActionListener(this);
		menuItemLogoff.addActionListener(this);
		menuItemQuit.addActionListener(this);
		menuItemServerSettings.addActionListener(this);
		menuItemAvailability.addActionListener(this);
		menuItemUserPass.addActionListener(this);
		menuItemBlockedUsers.addActionListener(this);
		menuItemUsersBlockingMe.addActionListener(this);
		menuItemCreateChannel.addActionListener(this);
		
		// TODO: get user info post-startup to set up ChatClient
		try {
			client = new ChatClient("", "", "localhost",
					DEFAULT_PORT, this);
		} catch (IOException exception) {
			System.exit(1);
		}
		
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				quit();
			}
		});

		AddUser("John");
		AddChannel("birb");
	}

	public final void AddUser(String username) {
        javax.swing.JMenu userMenu = new javax.swing.JMenu(username);
        javax.swing.JCheckBoxMenuItem blockMenuItem = new javax.swing.JCheckBoxMenuItem("Block " + username);
        javax.swing.JMenuItem messageMenuItem = new javax.swing.JMenuItem("Message " + username);
        javax.swing.JCheckBoxMenuItem forwardMenuItem = new javax.swing.JCheckBoxMenuItem("Forward " + username);
        javax.swing.JMenuItem statusMenuItem = new javax.swing.JMenuItem("Status " + username);
        javax.swing.JMenuItem drawMenuItem = new javax.swing.JMenuItem("Draw " + username);
        
        blockMenuItem.addActionListener(this);
        messageMenuItem.addActionListener(this);
        forwardMenuItem.addActionListener(this);
        statusMenuItem.addActionListener(this);
        drawMenuItem.addActionListener(this);
        
        userMenu.add(blockMenuItem);
        userMenu.add(messageMenuItem);
        userMenu.add(forwardMenuItem);
        userMenu.add(statusMenuItem);
        userMenu.add(drawMenuItem);
        
        usersMenu.add(userMenu);
    }
    
    public final void AddChannel(String channelName) {
        javax.swing.JCheckBoxMenuItem channelMenu = new javax.swing.JCheckBoxMenuItem(channelName);
        
        channelMenu.addActionListener(this);
        
        channelsMenu.add(channelMenu);
    }

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        inputText = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        mainText = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        jMenu7 = new javax.swing.JMenu();
        menuItemLogin = new javax.swing.JMenuItem();
        menuItemLogoff = new javax.swing.JMenuItem();
        menuItemQuit = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        menuItemServerSettings = new javax.swing.JMenuItem();
        menuItemAvailability = new javax.swing.JCheckBoxMenuItem();
        menuItemUserPass = new javax.swing.JMenuItem();
        usersMenu = new javax.swing.JMenu();
        menuItemBlockedUsers = new javax.swing.JMenuItem();
        menuItemUsersBlockingMe = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        channelsMenu = new javax.swing.JMenu();
        menuItemCreateChannel = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();

        jMenu1.setText("jMenu1");

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("File");
        jMenuBar2.add(jMenu4);

        jMenu5.setText("Edit");
        jMenuBar2.add(jMenu5);

        jMenuItem2.setText("jMenuItem2");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jMenuItem3.setText("jMenuItem3");

        jMenuItem4.setText("jMenuItem4");

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        jMenuItem12.setText("jMenuItem12");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        inputText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextActionPerformed(evt);
            }
        });

        mainText.setEditable(false);
        mainText.setColumns(20);
        mainText.setLineWrap(true);
        mainText.setRows(5);
        jScrollPane4.setViewportView(mainText);

        jMenu7.setText("Chat Client");

        menuItemLogin.setText("Login");
        jMenu7.add(menuItemLogin);

        menuItemLogoff.setText("Logoff");
        menuItemLogoff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLogoffActionPerformed(evt);
            }
        });
        jMenu7.add(menuItemLogoff);

        menuItemQuit.setText("Quit");
        jMenu7.add(menuItemQuit);

        menuBar.add(jMenu7);

        jMenu8.setText("Settings");

        menuItemServerSettings.setText("Server Settings");
        jMenu8.add(menuItemServerSettings);

        menuItemAvailability.setSelected(true);
        menuItemAvailability.setText("Available");
        jMenu8.add(menuItemAvailability);

        menuItemUserPass.setText("Set Username and Password");
        jMenu8.add(menuItemUserPass);

        menuBar.add(jMenu8);

        usersMenu.setText("Users");

        menuItemBlockedUsers.setText("Blocked Users");
        usersMenu.add(menuItemBlockedUsers);

        menuItemUsersBlockingMe.setText("Users Blocking Me");
        usersMenu.add(menuItemUsersBlockingMe);
        usersMenu.add(jSeparator1);

        menuBar.add(usersMenu);

        channelsMenu.setText("Channels");

        menuItemCreateChannel.setText("Create Channel");
        channelsMenu.add(menuItemCreateChannel);
        channelsMenu.add(jSeparator2);

        menuBar.add(channelsMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                    .addComponent(inputText))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>    

	private void menuItemUnblockActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menuItemUnblockActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_menuItemUnblockActionPerformed

	private void menuItemLogoffActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menuItemLogoffActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_menuItemLogoffActionPerformed

	private void menuItemForwardingActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menuItemForwardingActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_menuItemForwardingActionPerformed

	private void inputTextActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_inputTextActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_inputTextActionPerformed

	private void menuItemChannelActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menuItemChannelActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_menuItemChannelActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new ClientGui().setVisible(true);
			}
		});
	}

	 // Variables declaration - do not modify                     
    private javax.swing.JMenu channelsMenu;
    private javax.swing.JTextField inputText;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTextArea mainText;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JCheckBoxMenuItem menuItemAvailability;
    private javax.swing.JMenuItem menuItemBlockedUsers;
    private javax.swing.JMenuItem menuItemCreateChannel;
    private javax.swing.JMenuItem menuItemLogin;
    private javax.swing.JMenuItem menuItemLogoff;
    private javax.swing.JMenuItem menuItemQuit;
    private javax.swing.JMenuItem menuItemServerSettings;
    private javax.swing.JMenuItem menuItemUserPass;
    private javax.swing.JMenuItem menuItemUsersBlockingMe;
    private javax.swing.JMenu usersMenu;
    // End of variables declaration         

	@Override
	public void actionPerformed(ActionEvent e) {
		
		String splitActions[] = e.getActionCommand().split(" ");
		
		if (e.getActionCommand().equals(inputText.getText())) {
			accept();
			inputText.setText("");
			return;
			// DisplayText(e.getActionCommand());
		}
		switch (splitActions[0]) {
		case "Login":
			login();
			break;
		case "Logoff":
			logoff();
			break;
		case "Quit":
			quit();
			break;
		case "Server":
			changeServerSettings();
			break;
		case "Available":
			changeAvailability();
			break;
		case "Set":
			setUsernameAndPassword();
			break;
		case "Blocked":
			blockedUsers();
			break;
		case "Users":
			usersBlockingMe();
			break;
		case "Block":
			blockUser(splitActions[1]);
			break;
		case "Message":
			messageUser(splitActions[1]);
			break;
		case "Forward":
			setForwardingToUser(splitActions[1]);
			break;
		case "Status":
			getUserStatus(splitActions[1]);
			break;
		case "Draw":
			sendDrawing(splitActions[1]);
			break;
		case "Create":
			createChannel();
			break;
		default:
			joinLeaveChannel(splitActions[0]);
		}
	}
	
	// TODO Implement these methods
	
	public void login() {
		client.handleMessageFromClientUI("#login " + username + " " + password);
	}
	
	public void logoff() {
		client.handleMessageFromClientUI("#logoff");
	}
	
	public void quit() {
		client.handleMessageFromClientUI("#quit");
		System.exit(0);
	}
	
	public void changeServerSettings() {
		
	}
	
	public void changeAvailability() {
		
	}
	
	public void setUsernameAndPassword() {
		try {
			username = inputText.getText().split(" ")[0];
			password = inputText.getText().split(" ")[1];
		} catch (Exception e) {
			display("Could not get username or password.\n"
					+ "To set username and password, please type 'username password' into the input bar at the bottom and click 'Set Username and Password'");
		}
		inputText.setText("");
		display("Set username and password");
	}
	
	public void blockedUsers() {
		client.handleMessageFromClientUI("#whoiblock");
	}
	
	public void usersBlockingMe() {
		client.handleMessageFromClientUI("#whoblocksme");
	}
	
	public void blockUser(String username) {
		
	}
	
	public void messageUser(String username) {
		
	}
	
	public void setForwardingToUser(String username) {
		
	}
	
	public void getUserStatus(String username) {
		
	}

	public void sendDrawing(String username) {
		display(username);
	}
	
	public void createChannel() {
		
	}
	
	public void joinLeaveChannel(String channelName) {
		// check if already a member of channelName
		//   if so, leave channel
		//   otherwise, join channel
	}
	
	
	// END OF METHODS THAT NEED IMPLEMENTATION
	
	@Override
	public void display(String message) {
		mainText.append(message + "\n");
	}

	@Override
	public void accept() {
		try {
			String message = inputText.getText();
			client.handleMessageFromClientUI(message);
		} catch (Exception ex) {
			System.out.println("Unexpected error while reading from console!");
		}
	}
	
}
