
public class BST{
	// this Binary Search Tree is used for the implementation of the 
	// Symbol Table containing Symbols: (id,value) pairs
	// A Symbol is a Comparable object containing a String Identifier  
	// and a Boolean value 
	private BSTNode<IdVal> root;

	//empty tree
	public BST(){
		this.root = null;
	}

	public boolean isEmpty(){
		return root==null;
	}

	public void insertItem(IdVal item) throws BSTException{
		root = insertItem(root, item);
	}

	private BSTNode<IdVal> insertItem(BSTNode<IdVal> node, IdVal item) throws BSTException{
		BSTNode<IdVal> newSubTree;
		if(node==null){
			newSubTree = new BSTNode<IdVal>(item);
			return newSubTree;
		}
		
		IdVal tok = node.getItem();
		if(item.getKey().compareTo(tok.getKey())<0){
			newSubTree = insertItem(node.getLeft(), item);
			node.setLeft(newSubTree);
			return node;
		}
		if(item.getKey().compareTo(tok.getKey())>0){
			newSubTree = insertItem(node.getRight(), item);
			node.setRight(newSubTree);
			return node;
		}
		// ERROR: inserting existing item
		else 
			throw new BSTException("Inserting item with existing key!");
	}

	public IdVal retrieveItem(String key){
		return retrieveItem(root,key);
	}
	
	private IdVal retrieveItem(BSTNode<IdVal> node, String key){
		IdVal treeItem;
		
		if(node==null)
			treeItem = null;
		else{
			IdVal nodeItem = node.getItem();
			if(key.compareTo(nodeItem.getKey()) == 0)
				//found
				treeItem = nodeItem;
			else if(key.compareTo(nodeItem.getKey()) < 0)
				//search left
				treeItem = retrieveItem(node.getLeft(), key);
			else
				// search right
				treeItem = retrieveItem(node.getRight(), key);
		}
		return treeItem;

	}
	
	public void preorderTraverse(){
		if (!isEmpty())
			preorderTraverse(root,"");
		else
			System.out.println("root is null");
	}

	public void preorderTraverse(BSTNode<IdVal> node, String indent){
		System.out.println(indent+node.getItem());		
		if(node.getLeft()!=null) {
			System.out.println(indent+"left");
			preorderTraverse(node.getLeft(),indent+" ");
		}

		if(node.getRight()!=null) {
			System.out.println(indent+"right");
			preorderTraverse(node.getRight(),indent+" ");
		}
	}
	
	// if item is leaf
	//		set link from parent to null
	// if item has one child
	//		child becomes root
	// if item has two children
	//		go left and find highest child
	//		delete child and use as new root
	public void deleteItem(String key){
		deleteItem(root,key,null,false);
	}
	
	private void deleteItem(BSTNode<IdVal> node, String key,BSTNode<IdVal> parent, Boolean side){
		// if the current node equals the key, delete the node and return
		if (node.getItem().getKey().equals(key)){
			System.out.println("Deleting " + key);
			if (node.getLeft()==null && node.getRight()==null){
				// set link from parent to null
				if(side==false){
					parent.setLeft(null);
				}
				else{
					parent.setRight(null);
				}
				return;
			}
			else if (node.getLeft()!=null && node.getRight()==null){
				// set link from parent to left child
				if(side==false){
					parent.setLeft(node.getLeft());
				}
				else{
					parent.setRight(node.getLeft());
				}
				return;
			}
			else if (node.getLeft()==null && node.getRight()!=null){
				// set link from parent to right child
				if(side==false){
					parent.setLeft(node.getRight());
				}
				else{
					parent.setRight(node.getRight());
				}
				return;
			}
			else if (node.getLeft()!=null && node.getRight()!=null){
				// go to left child once
				// replace node with right child
				//	set parent of node to point to right child
				//	set children of node to be children of right child
				// replace right child with left child of right child
				BSTNode<IdVal> tempChild = node.getLeft();
				BSTNode<IdVal> tempParent = tempChild;
				while(tempChild.getRight()!=null){
					tempParent = tempChild;
					tempChild = tempChild.getRight();
				}
				if(side==false){
					parent.setLeft(tempChild);
				}
				else{
					parent.setRight(tempChild);
				}
				if(tempChild.getLeft()!=null){
					tempParent.setRight(tempChild.getLeft());
				}
				tempChild.setLeft(node.getLeft());
				tempChild.setRight(node.getRight());
				
			}
		}
		// otherwise continue through tree
		if (node.getItem().getKey().compareTo(key)>0 && node.getLeft()!=null){
			deleteItem(node.getLeft(),key,node,false);
		}
		if (node.getItem().getKey().compareTo(key)<0 && node.getRight()!=null){
			deleteItem(node.getRight(),key,node,true);
		}
		return;
	}
}
