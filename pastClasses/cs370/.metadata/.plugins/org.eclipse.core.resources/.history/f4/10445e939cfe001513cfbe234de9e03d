
public class circBuffer<T>{

	private T[] buffer;
	private int tail;
	private int head;
	
	// construct a buffer with provided size
	public circBuffer(int size){
		head = 0;
		tail = 0;
		buffer = (T[]) new Object[size];
	}
	
	// add an item to the buffer
	// returns true if succesfully added, false if buffer is full
	public boolean add(T item){
		if (head != (tail - 1)) {
	        buffer[head] = item;
	        head ++;
	    } else {
	        return false;
	    }
	    head = head % buffer.length;
		return true;
	}
	
	// get an item from the buffer
	// returns item, or null if buffer is empty
	public T get(){
		T t = null;
	    int adjTail = tail > head ? tail - buffer.length : tail;
	    if (adjTail < head) {
	        t = (T) buffer[tail++];
	        tail = tail % buffer.length;
	    } else {
	        return null;
	    }
	    return t;
	}
	
	
	public static void main(String[] args) {
		 circBuffer<String> b = new circBuffer<String>(3);
		    for (int i = 0; i < 10; i++) {
		        System.out.println("Start: " + b);
		        b.add("One");
		        System.out.println("One: " + b);
		        b.add("Two");
		        System.out.println("Two: " + b);
		        System.out.println("Got '" + b.get() + "', now " + b);

		        b.add("Three");
		        System.out.println("Three: " + b);
		        // Test Overflow
		        // b.add("Four");
		        // System.out.println("Four: " + b);

		        System.out.println("Got '" + b.get() + "', now " + b);
		        System.out.println("Got '" + b.get() + "', now " + b);
		        // Test Underflow
		        // System.out.println("Got '" + b.get() + "', now " + b);

		        // Back to start, let's shift on one
		        b.add("Foo");
		        b.get();
		    }
	}

}
